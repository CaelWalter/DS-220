# -*- coding: utf-8 -*-
"""DS220_Project2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tPSVXMk4eooZil-ShtvlepFRPsO5v-IP

# DS 220 – Project #2 on Data Analysis with Python – Individual or Team!
##Project #2 – **Data Analysis with Python** – An Individual or Team (max 6) Project which you
must each host on your individual Github Account
## **Group members:** Yu-Hsiang Huang, Rowan Tolfree, Priyanshu Dey, Nathan Mannings, Cael Walter
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
#make sure that the dataset is imported to the notebook
nobel = pd.read_csv('export.csv')
pd.set_option('display.max_columns', 10)
nobel

from google.colab import drive
drive.mount('/content/drive')

"""***Question #1:*** What are the Top 5 institutions with the most Nobel laureates and their top category?"""

# Question 1: Distribution of Nobel laureates by University and find each of the top 5 university's top category

laureates_university = nobel['name'].value_counts().reset_index()
laureates_university.columns = ['University', 'Laureates Count']
laureates_university.head()

most_common_category = nobel.groupby('name')['category'].agg(lambda x: x.value_counts().idxmax())

# Join the most common category with the laureates_university DataFrame
laureates_university = laureates_university.join(most_common_category, on='University')
laureates_university.columns = ['university', 'Laureates Count', 'Top Category']

# Display the top 5 universities with their most represented category
laureates_university.head()

"""***Question #2:*** What are the trends of the gender of Nobel laureates throughout the year?"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# Convert 'year' column to numeric for plotting
nobel['year'] = pd.to_numeric(nobel['year'], errors='coerce')

# Grouping by year and gender and counting the number of laureates
gender_count_by_year = nobel.groupby(['year', 'gender']).size().unstack(fill_value=0)

# Plotting the data
gender_count_by_year.plot(kind='line', figsize=(12, 6), title='Nobel Laureates Gender Count Over the Years')
plt.xlabel('Year')
plt.ylabel('Count of Laureates')
plt.show()

"""***Question #3:*** What were the top 5 countries that produced the most Nobel Prize winning Laurets and what was the top type?




"""

# Group the DataFrame by 'bornCountry' and count the number of laureates for each country
laureates_by_country = nobel.groupby(['bornCountry'])['id'].count().reset_index()

#group and find the most top category per country
category_by_country = nobel.groupby(['bornCountry'])['category'].max().reset_index()

#combine the two querries
combined = pd.merge(laureates_by_country, category_by_country, on='bornCountry', how='outer')

# Find the top 5 countries with the most laureates
top_countries = combined.nlargest(5, 'id')

#set the new column titles
top_countries.columns=['Country of birth','Prize Count','Category']

#print Graph
top_countries.head()

"""Question #4: At what age did the winners of the Nobel Prize receive their reward?"""

# Extract relevant columns
age_data = nobel[['born', 'year']]

# Convert birth_date to datetime
age_data['born'] = pd.to_datetime(age_data['born'], errors='coerce')

# Calculate age at the time of receiving the award
age_data['age_at_award'] = age_data['year'] - age_data['born'].dt.year

# Filter out invalid age values, if any
valid_age_data = age_data[age_data['age_at_award'] >= 0]

# Plotting the distribution of ages
plt.figure(figsize=(10, 6))
plt.hist(valid_age_data['age_at_award'], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribution of Nobel Laureates Ages at Award')
plt.xlabel('Age at Award')
plt.ylabel('Number of Laureates')
plt.show()

"""**Question #5: How long has this dataset been maintained for?**


"""

# Extract the prize year column
prize_years = nobel['year']

# Find the start and end years of the dataset
start_year = prize_years.min()
end_year = prize_years.max()

print(f"The Nobel Prize dataset has been maintained from {start_year} to {end_year}.")

"""#Question #6: What is the top 5 Categories with the highest shared noble Prizes
*Priyanshu*

**Overview:**
>This section outlines the methodology used to determine which Nobel Prize categories have the most shared prizes. It explains the process of filtering and grouping the dataset to count shared prizes in each category

**Methodology:**
>For this analysis, our objective was to identify the Nobel Prize categories with the highest number of shared prizes. This can give insights into which fields tend to have collaborative work leadijng to Nobel-worthy discoveries. We filtered the dataset for prizes shared by laureates and then grouped these by category to count the occurrences.
"""

'''
This code snippet performs an analyiss on the Nobel Prize dataset to find which categories
of the Nobel Prize have the highest number of shared prizes.
'''
#Filter for shared prizes
shared_prizes= nobel[nobel['share']>1]
#Group by catergory and count the shared prizes
shared_prizes_count= shared_prizes.groupby('category').size()
#Get top 5 categories with the most shared prizes
top_shared_prizes_categories= shared_prizes_count.nlargest(5)
#Print the top 5 as a graph
plt.figure(figsize=(10,6))
#choosing the color of the bars
top_shared_prizes_categories.plot(kind='bar', color='red')
#Labels for the graph
plt.title('Top 5 Categories with the Highest Shared Noble Prizes')
plt.xlabel('Category')
plt.ylabel('Number of Shared Prizes')
#adjusting the layout and setting the axis lables to 50 degres s for better viewing
plt.xticks(rotation=50)
plt.show()

"""**Findings:**
> Upon analyzing the data, we discovered that the top 5 categories in terms of shared Nobel Prizes are Medicine, Physics, Chemistry, Peace, and Economics. These results suggest that these significant scientific fields, often involve collaborative research. The high number of shared prizes in these categories could indicate the complexity and scale of work in these areas, often requiring teamwork and joint efforts.

#Question #7 Which field has seen the most growth in terms of laureates over the years
*Priyanshu*

**Overview:**
>Describes the methodology for exammining the growth trends of Nobel Prize categories over time. This includes calculating cummalative laureate counts and anazlyzing recent trends.

**Methodology:**
>We aimed to understand how the representation of different Nobel Prize categories has evolved over the years. This involved calculation the cumulative count of laureates in each category over time and analyzing the distribution of Nobel Prizes in the most recent decade.
"""

'''
This code snippet is designed to visualize the growth and distribution of Nobel Prize
laureates across differnt categories over time
'''
#Group the Nobel dataset by year and category then count num of laureates in each category per year
categiry_growth= nobel.groupby(['year','category']).size().unstack(fill_value=0)
#Calculating the cumulative sum of laureates in each category over the years
total_category_growth= categiry_growth.cumsum()
#Extracting the last 10 years of data to analyze recent trends
recent_shift=total_category_growth.tail(10)
#Choosing a color map for the plot
Colormap=plt.cm.plasma
num_categories = len(total_category_growth.columns)
#Generating a list of colors from the colorpam, one for each category
colors=[Colormap(i/num_categories)for i in range(num_categories)]

#Seting up figures for two sublplots
plt.figure(figsize=(10,10))

#First Subplot: Cumlative growth of laureates in each category
plt.subplot(2,1,1)
#Creates correspoding colors for the differnt category
for category, color in zip(total_category_growth.columns,colors):
  plt.plot(total_category_growth.index,total_category_growth[category],label=category,color=color)
plt.legend(title="Categories")
plt.title('Total Growth of Nobel Prize Laureats in Each Category')
plt.ylabel('Cumulative Count of Laureates')

#Secound subplot:Distribution of Nobel Prizes in the last 30 years
plt.subplot(2,1,2)
#Calculating the number of categories for color mapping
num_categories=len(recent_shift.columns)
#Plotting the recent shift in Nobel Prizes with different colors for each
recent_shift.plot(kind='bar', ax=plt.gca(), stacked= False,color=colors)
#Ploting the Labels for each
plt.title ('Distruvtuion of Nobel Prizes in the Last 10 Years')
plt.ylabel('Number of Laureates')

#adjusting the layout and setting the axis lables to 50 degres s for better viewing
plt.tight_layout()
plt.xticks(rotation=50)
plt.show()

"""**Findings**
>The cumulative analysis over the years showed a steady increase in all categories with a notable acceleration in certain fields like Physics and Medicine. The recent decade analysis highlighted an interesting shift with categories like Economics and Peace becoming more prominent. This means the growth trends in categories like physics and medicine align with the rapid advancements and increasing complexities in there fields. The recent rise in categories like economics and peace could reflect the evolving global focus on economic theories and peacekeeping efforts in response to contemporary challenges.
"""